//
//  AddGameVC.swift
//  QuizPlease
//
//  Created by –í–ª–∞–¥–∏—Å–ª–∞–≤ on 26.08.2020.
//  Copyright ¬© 2020 –í–ª–∞–¥–∏—Å–ª–∞–≤. All rights reserved.
//

import UIKit

protocol AddGameVCDelegate: AnyObject {
    func didAddGameToUserProfile(_ vc: AddGameVC)
}

final class AddGameVC: UIViewController {

    // MARK: - Outlets

    @IBOutlet private weak var addGameButton: ScalingButton!
    @IBOutlet private weak var infoView: UIView!
    @IBOutlet private weak var gameNameLabel: UILabel!
    @IBOutlet private weak var gameNumberLabel: UILabel!
    @IBOutlet private weak var placeNameLabel: UILabel!
    @IBOutlet private weak var placeAddressLabel: UILabel!
    @IBOutlet private weak var timeLabel: UILabel!
    @IBOutlet private weak var chooseTeamView: TitledTextFieldView!

    var token: String!
    var teamsInfo = [TeamInfo]()
    var chosenTeam: TeamInfo?
    var gameInfo: GameInfo?

    weak var delegate: AddGameVCDelegate?

    // MARK: - Add Game Button Pressed
    @IBAction private func addGameButtonPressed(_ sender: Any) {
        saveGame()
        // navigationController?.popViewController(animated: true)
    }

    // MARK: - Lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        prepareNavigationBar(barStyle: .transcluent(tintColor: view.backgroundColor))
        configureViews()
        setupData()
    }

    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        addGameButton.layer.cornerRadius = 20
        addGameButton.layer.sublayers?.removeAll(where: { $0 is CAGradientLayer })
        addGameButton.addGradient(colors: [.lemon, .lightOrange], insertAt: 0)
    }

    private func setupData() {
        setGameData()
        gameNameLabel.text = "–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶"
        loadDataFromQR()
    }

    // MARK: - Save Game
    private func saveGame() {
        guard let id = chosenTeam?.id else {
            showSimpleAlert(
                title: "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞",
                message: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É, –∑–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã –∏–≥—Ä–∞–ª–∏"
            )
            return
        }
        guard gameInfo?.placeInfo.cityName == AppSettings.defaultCity.title else {
            showSimpleAlert(
                title: "–ì–æ—Ä–æ–¥ –∏–≥—Ä—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç",
                message: "–ì–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–≤–æ–¥–∏–ª–∞—Å—å –∏–≥—Ä–∞, –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –≥–æ—Ä–æ–¥–æ–º, " +
                "–∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑–∞–Ω –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
            )
            return
        }
        checkUserLocation { [weak self] isSatisfactory in
            guard let self = self else { return }
            guard let isClose = isSatisfactory else {
                self.showSimpleAlert(title: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é")
                return
            }
            if isClose {
                self.checkIn(teamId: id)
            } else {
                self.showSimpleAlert(
                    title: "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ",
                    message: "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É –≤ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏ –ø–æ–ª—É—á–∏—Ç—å –∑–∞ –Ω–µ—ë –±–∞–ª–ª—ã, " +
                    "–≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –≤ –º–µ—Å—Ç–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏–≥—Ä—ã"
                )
            }
        }
    }

    // MARK: - Check In
    private func checkIn(teamId id: Int) {
        NetworkService.shared.checkInOnGame(with: token, chosenTeamId: id) { [weak self] (result) in
            guard let self = self else { return }
            switch result {
            case let .failure(error):
                print(error)
                self.showErrorConnectingToServerAlert()
            case let .success(response):
                self.processCheckInResponse(response)
            }
        }
    }

    private func processCheckInResponse(_ response: AddGameResponse) {
        if response.success ?? false {
            showSimpleAlert(
                title: response.title ?? "–£—Å–ø–µ—à–Ω–æ",
                message: response.text ?? "–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞",
                okHandler: { _ in
                    self.delegate?.didAddGameToUserProfile(self)
                    self.navigationController?.popViewController(animated: true)
                }
            )
        } else {
            showSimpleAlert(
                title: response.title ?? "–û—à–∏–±–∫–∞",
                message: response.text ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
            )
        }
    }

    // MARK: - Load From QR
    private func loadDataFromQR() {
        NetworkService.shared.getTeamsFromQR(token) { [weak self] (serverResult) in
            guard let self = self else { return }
            switch serverResult {
            case let .failure(error):
                print(error)
                self.showGameNotFoundAlert()

            case let .success(teams):
                self.teamsInfo = teams.filter(\.isConfirmed)
                guard let id = teams.first?.game_id else {
                    self.showGameNotFoundAlert()
                    return
                }
                self.loadGameInfo(with: id)
            }
        }
    }

    private func showGameNotFoundAlert() {
        gameNameLabel.text = "-"
        showSimpleAlert(
            title: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–≥—Ä—É",
            message: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –µ—â—ë —Ä–∞–∑"
        ) { _ in
            self.navigationController?.popViewController(animated: true)
        }
    }

    // MARK: - Load Game
    private func loadGameInfo(with id: Int) {
        NetworkService.shared.getGameInfo(by: id) { [weak self] (serverResult) in
            guard let self = self else { return }
            switch serverResult {
            case let .failure(error):
                print(error)
                self.showErrorConnectingToServerAlert()
            case let.success(gameInfo):
                self.gameInfo = gameInfo
            }
            self.setGameData()
        }
    }

    // MARK: - Check User Location
    /// - parameter isSatisfactory: `true` - user location is close to the place location,
    /// `false` - user location is too far from the place location, `nil` - unavailable to get user loaction
    private func checkUserLocation(completion: @escaping (_ isSatisfactory: Bool?) -> Void) {
        if Configuration.current != .production && AppSettings.geoChecksAlwaysSuccessful {
            print("üß≠ Location check always successful")
            completion(true)
            return
        }
        UserLocationService.shared.askUserLocation { (location) in
            guard let gameInfo = self.gameInfo else { return }
            guard let location = location else {
                completion(nil)
                return
            }
            let isCloseToPlace = gameInfo.placeInfo.isCloseToLocation(location)
            completion(isCloseToPlace)
        }
    }

    // MARK: - Set Game Fata
    private func setGameData() {
        gameNameLabel.text = gameInfo?.nameGame ?? "-"
        gameNumberLabel.text = gameInfo?.gameNumber ?? "#"
        placeNameLabel.text = gameInfo?.placeInfo.title ?? "-"
        placeAddressLabel.text = gameInfo?.placeInfo.fullAddress  ?? "-"

        if let dateStr = gameInfo?.formattedDate, let time = gameInfo?.time {
            timeLabel.text = "\(dateStr) –≤ \(time)"
        } else {
            timeLabel.text = "-"
        }
    }

    private func configureViews() {
        infoView.layer.borderColor = UIColor.systemGreen.cgColor
        infoView.layer.borderWidth = 4
        infoView.layer.cornerRadius = 20

        let tapRecognizer = UITapGestureRecognizer(target: self, action: #selector(didPressChooseTeam))
        chooseTeamView.addGestureRecognizer(tapRecognizer)
        chooseTeamView.textField.isEnabled = false
    }

    @objc
    private func didPressChooseTeam() {
        guard teamsInfo.count > 0 else {
            showSimpleAlert(
                title: "–ù–∞ —ç—Ç—É –∏–≥—Ä—É –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –Ω–∏ –æ–¥–Ω–∞ –∫–æ–º–∞–Ω–¥–∞",
                message: "–í–æ–∑–º–æ–∂–Ω–æ, –∏–≥—Ä–∞ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥ –ø–æ–∑–∂–µ"
            )
            return
        }
        let names = teamsInfo.map { $0.teamName }
        showChooseItemActionSheet(itemNames: names) { [unowned self] (teamName, index) in
            self.chooseTeamView.textField.text = teamName
            self.chosenTeam = self.teamsInfo[index]
        }
    }
}
